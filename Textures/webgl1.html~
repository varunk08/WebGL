<!DOCTYPE>
<html>
<head>
<title>
	Assign 4 Texture Mapping
</title>
<!--<script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>-->
<script type="text/javascript" src="../Common/webgl-utils.js"></script>
<script type="text/javascript" src="../Common/MV.js"></script>
<script type="text/javascript" src="camera.js"></script>
<script type="text/javascript" src="light.js"></script>
<script type="text/javascript" src="Cube.js"></script>
<script type="text/javascript" src="tetrahedron.js"></script>
<script type="text/javascript" src="plane.js"></script>
<script type="text/javascript" src="sphere.js"></script>
<script type="text/javascript" src="webgl1.js"></script>
<script id="vs" type="x-shader/x-vertex">
//VERTEX SHADER
//attributes
attribute vec3 aVertexNormal;
attribute vec3 aVertexPosition;
attribute vec3 aVertexColor;
//attribute vec2 aTexCoord;
//uniforms
uniform bool useLighting;
uniform vec4 ambientProduct, diffuseProduct, specularProduct; //lighting
uniform vec4 lightPosition;
uniform float shininess;
uniform mat4 uMVMatrix;
uniform mat4 viewMatrix;
uniform mat4 uPMatrix;
uniform mat4 uNMatrix;
uniform float theta;
//varying
varying vec4 color;
void main(void){

//Lighting calculations
	vec3 cspos = (viewMatrix * uMVMatrix * vec4(aVertexPosition,1.0)).xyz;
	vec3 cslight = (viewMatrix * lightPosition).xyz;
	vec3 L = normalize( cslight - cspos);
	vec3 E = normalize( -cspos );
	vec3 H = normalize( L + E );
	vec3 N = normalize ( (uNMatrix * vec4(aVertexNormal, 0.0)).xyz);

	//ambient 
	vec4 ambient = ambientProduct;
	//diffuse
	float Kd = max( dot(N,L), 0.0 );
	vec4  diffuse = Kd*diffuseProduct;
	//specular
	float Ks = pow( max(dot(N, H), 0.0), shininess );
    	vec4  specular = Ks * specularProduct;
        if( dot(L, N) < 0.0 ) {
		specular = vec4(0.0, 0.0, 0.0, 1.0);
	} 


	//final position and color updates
	gl_Position = uPMatrix * viewMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);;
	if (useLighting){
		color = ambient + diffuse + specular;
	}
	else{
		color = vec4(aVertexColor,1.0) ;//+ vec4(aTexCoord,0.0,1.0);
	}
	//color = vec4(N,1.0);
	color.a = 1.0;
}
</script>
<script id="fs" type="x-shader/x-fragment">
//FRAGMENT SHADER
precision mediump float;

varying vec4 color;
void main(){
	//gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);
	gl_FragColor = color;
}
</script>

<script id="vs_tex" type="x-shader/x-vertex">
//VERTEX SHADER
//attributes
attribute vec3 aVertexPosition;
attribute vec3 aVertexColor;
attribute vec3 aVertexNormal;
attribute vec2 aTexCoord;
//uniforms
/*uniform bool useLighting;
uniform vec4 ambientProduct, diffuseProduct, specularProduct; //lighting
uniform vec4 lightPosition;
uniform float shininess; */
uniform mat4 uMVMatrix;
uniform mat4 viewMatrix;
uniform mat4 uPMatrix;
uniform mat4 uNMatrix;

//varying
varying vec2 fTexCoord;
varying vec4 fcolor;
void main(void){

//Lighting calculations
	/*vec3 cspos = (viewMatrix * uMVMatrix * vec4(aVertexPosition,1.0)).xyz;
	vec3 cslight = (viewMatrix * lightPosition).xyz;
	vec3 L = normalize( cslight - cspos);
	vec3 E = normalize( -cspos );
	vec3 H = normalize( L + E );
	vec3 N = normalize ( (uNMatrix * vec4(aVertexNormal, 0.0)).xyz);

	//ambient 
	vec4 ambient = ambientProduct;
	//diffuse
	float Kd = max( dot(N,L), 0.0 );
	vec4  diffuse = Kd*diffuseProduct;
	//specular
	float Ks = pow( max(dot(N, H), 0.0), shininess );
    	vec4  specular = Ks * specularProduct;
        if( dot(L, N) < 0.0 ) {
		specular = vec4(0.0, 0.0, 0.0, 1.0);
	} 
*/
	vec3 N = normalize ( (uNMatrix * vec4(aVertexNormal, 0.0)).xyz);
	//final position and color updates
	gl_Position = uPMatrix * viewMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);;

	fcolor = vec4(N, 0.0) + vec4(aVertexColor,1.0) + vec4(0.0,aTexCoord,1.0);
	
	//color = vec4(N,1.0);
	fcolor.a = 1.0;
	fTexCoord = aTexCoord;
}
</script>
<script id="fs_tex" type="x-shader/x-fragment">
//FRAGMENT SHADER
precision mediump float;

varying vec2 fTexCoord;
uniform sampler2D texture;
varying vec4 fcolor;

void main(){
	//gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);
	gl_FragColor =  0.1 * fcolor + texture2D(texture, fTexCoord);
}
</script>

<script id="vs_tet" type="x-shader/x-vertex">
//VERTEX SHADER
//attributes
attribute vec3 aVertexPosition;
attribute vec3 aVertexColor;
attribute vec3 aVertexNormal;
attribute vec2 aTexCoord;
attribute float aFaceIndex;

//uniforms
/*uniform bool useLighting;
uniform vec4 ambientProduct, diffuseProduct, specularProduct; //lighting
uniform vec4 lightPosition;
uniform float shininess; */
uniform mat4 uMVMatrix;
uniform mat4 viewMatrix;
uniform mat4 uPMatrix;
uniform mat4 uNMatrix;

//varying
varying float fFaceIndex;
varying vec2 fTexCoord;
varying vec4 color;

void main(void){

//Lighting calculations
	/*vec3 cspos = (viewMatrix * uMVMatrix * vec4(aVertexPosition,1.0)).xyz;
	vec3 cslight = (viewMatrix * lightPosition).xyz;
	vec3 L = normalize( cslight - cspos);
	vec3 E = normalize( -cspos );
	vec3 H = normalize( L + E );
	vec3 N = normalize ( (uNMatrix * vec4(aVertexNormal, 0.0)).xyz);

	//ambient 
	vec4 ambient = ambientProduct;
	//diffuse
	float Kd = max( dot(N,L), 0.0 );
	vec4  diffuse = Kd*diffuseProduct;
	//specular
	float Ks = pow( max(dot(N, H), 0.0), shininess );
    	vec4  specular = Ks * specularProduct;
        if( dot(L, N) < 0.0 ) {
		specular = vec4(0.0, 0.0, 0.0, 1.0);
	} 
*/
vec3 N = normalize ( (uNMatrix * vec4(aVertexNormal, 0.0)).xyz);
	//final position and color updates
	gl_Position = uPMatrix * viewMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);;

	color = vec4(N, 1.0) + vec4(aVertexColor,1.0) + vec4(0.0,aTexCoord,1.0);
	
	//color = vec4(N,1.0);
	color.a = 1.0;
	fTexCoord = aTexCoord;
	fFaceIndex = aFaceIndex;
}
</script>
<script id="fs_tet" type="x-shader/x-fragment">
//FRAGMENT SHADER
precision mediump float;

varying float fFaceIndex;
varying vec2 fTexCoord;

uniform sampler2D texture1;
uniform sampler2D texture2;
uniform sampler2D texture3;
uniform sampler2D texture4;

varying vec4 color;

void main(){
	vec4 outColor = vec4(0.0,0.0,0.0,1.0);
	if(fFaceIndex == 0.0)
	{
		outColor =  vec4(1.0,0.0,0.0,1.0);//texture2D(texture1, fTexCoord);
	}
	else if(fFaceIndex == 1.0)
	{
		outColor =  vec4(0.0,1.0,0.0,1.0);//texture2D(texture2, fTexCoord);
	}
	else if(fFaceIndex == 2.0)
	{
		outColor =  vec4(0.0,0.0,1.0,1.0);//texture2D(texture3, fTexCoord);
	}
	else if(fFaceIndex == 3.0)
	{
		outColor =  texture2D(texture4, fTexCoord);
	}
	else if(fFaceIndex == -1.0)
	{
		outColor = color;
	}
	outColor.a = 1.0;
	gl_FragColor =  outColor;
}
</script>

</head>
<body>
<canvas id="mycanvas" width="512" height="512"></canvas>
<button id="button1">Sample button</button>
<textarea id="txtArea" width = "500" height="200"></textarea>
<img id = "texImage" src = "images/sigimage.gif" hidden></img>
<img id = "tetImage1" src = "images/image1.jpeg" hidden></img>
<img id = "tetImage2" src = "images/image2.jpeg" hidden></img>
<img id = "tetImage3" src = "images/image3.jpeg" hidden></img>
<img id = "tetImage4" src = "images/image4.jpeg" hidden></img>
</body>
</html>
